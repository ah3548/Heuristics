// Generated by CoffeeScript 1.10.0
(function() {
  var HOST, MATCHMAKER_PORT, N, PLAYER_PORT, Utils, client, connectingPort, createRandomCandidate, lastReceivedNumbers, lastReceivedScore, makeCandidate, net, parseData, parseMultipleCandidates, parseSingleCandidate, utilsL;

  console.log("In matchMaker Client");

  net = require('net');

  Utils = require("./utils");

  this.utils = new Utils;

  utilsL = new Utils;

  N = this.utils.N;

  HOST = this.utils.HOST;

  MATCHMAKER_PORT = this.utils.MATCHMAKER_PORT;

  PLAYER_PORT = this.utils.PLAYER_PORT;

  console.log("Write originanl Way" + MATCHMAKER_PORT);

  console.log("Matchmaker Port " + MATCHMAKER_PORT);

  connectingPort = {
    port: MATCHMAKER_PORT
  };

  lastReceivedNumbers = [];

  lastReceivedScore = 0;

  /*parseData = function(data) {
    data = data.toString();
    if (data.split("\n").length > 10) {
      return parseMultipleCandidates(data);
    } else {
      return parseSingleCandidate(data);
    }
  };
  parseSingleCandidate = function(data) {
    var index, k, ref, splitData;
    data = data.toString();
    lastReceivedNumbers = [];
    splitData = data.split(/\D/);
    for (index = k = 0, ref = N - 1; 0 <= ref ? k <= ref : k >= ref; index = 0 <= ref ? ++k : --k) {
      lastReceivedNumbers.push(splitData[index]);
    }
    // Amir
    cSoFar[cSoFar.length-1].score = splitData[N + 2];
    return lastReceivedScore = splitData[N + 2];
  };

 parseMultipleCandidates = function(data) {
    var currentCandidate, currentCandidateScore, i, j, k, l, ref, ref1, results, splitData, totalCandidates, totalCandidatesScores, totalIterations, valuesPerCandidate;
    totalCandidates = [];
    totalCandidatesScores = [];
    currentCandidate = [];
    currentCandidateScore = 0;
    data = data.toString();
    splitData = data.split(/\D/);
    valuesPerCandidate = N + 4;
    totalIterations = splitData.length / valuesPerCandidate;
    results = [];
    for (i = k = 1, ref = totalIterations; 1 <= ref ? k <= ref : k >= ref; i = 1 <= ref ? ++k : --k) {
      for (j = l = 0, ref1 = N - 1; 0 <= ref1 ? l <= ref1 : l >= ref1; j = 0 <= ref1 ? ++l : --l) {
        currentCandidate.push(splitData[j]);
      }
      currentCandidateScore = splitData[N + 2];
      totalCandidates.push(currentCandidate);
      totalCandidatesScores.push(currentCandidateScore);
      results.push(splitData.splice(0, valuesPerCandidate));
      
      // Amir
      var candidate = {profile:currentCandidate,score:currentCandidateScore};
      cSoFar.push(candidate);
      console.log(i + ": " + candidate.score);
    }
    //console.log(cSoFar.length);
    return results;
  };*/
  var cSoFar = [];  
  parseData = function(data) {
      var candidates = data.split("\n");
      if (candidates.length > 10) {
          candidates.forEach(function(item) {
              var candidate = item.split("| ");
              if (candidate.length > 1) {
                candidate = {profile:candidate[0].split(" "),score:candidate[1]};
                cSoFar.push(candidate);
              }
          });
      }
      else {
          cSoFar[cSoFar.length-1].score = data.split("| ")[1].split(" ")[0];
          console.log(cSoFar[cSoFar.length-1].score);
      }
  }
    
  var mm1 = require("./mm");
  makeCandidate = function() {
    var randomCandidate = mm1.createGDCandidate(N, cSoFar);
    cSoFar.push({profile:randomCandidate,score:0});
    return randomCandidate;
  };

  createRandomCandidate = function() {
    var candidate, k, ref, weight;
    candidate = [];
    for (weight = k = 1, ref = N; 1 <= ref ? k <= ref : k >= ref; weight = 1 <= ref ? ++k : --k) {
      candidate.push(Math.random().toFixed(4));
    }
    return candidate;
  };

  client = net.connect(connectingPort, function() {
    return console.log("MM Client Connected on port " + connectingPort.port);
  });

  client.on('data', function(data) {
    var candidate, candidateString;
    data = data.toString();
    if (data !== "gameover") {
      parseData(data);
      candidate = makeCandidate();
      candidateString = utilsL.convertNumArrayToFormattedString(candidate);
        console.log(candidateString);
      console.log("MM Client sending data");
      return client.write(candidateString);
    } else {
      return console.log("GAMEOVER");
    }
  });

}).call(this);
